/*
 * TerminusDB API
 *
 * API for TerminusDB
 *
 * The version of the OpenAPI document: 10.0.3
 * Contact: team@terminusdb.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`document_path_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DocumentPathDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`document_path_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DocumentPathGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`document_path_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DocumentPathPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`document_path_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DocumentPathPutError {
    UnknownValue(serde_json::Value),
}


pub async fn document_path_delete(configuration: &configuration::Configuration, path: &str, author: &str, message: &str, graph_type: Option<&str>, nuke: Option<bool>, id: Option<&str>) -> Result<(), Error<DocumentPathDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/document/{path}", local_var_configuration.base_path, path=crate::apis::urlencode(path));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("author", &author.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message", &message.to_string())]);
    if let Some(ref local_var_str) = graph_type {
        local_var_req_builder = local_var_req_builder.query(&[("graph_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = nuke {
        local_var_req_builder = local_var_req_builder.query(&[("nuke", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DocumentPathDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn document_path_get(configuration: &configuration::Configuration, path: &str, graph_type: Option<&str>, skip: Option<i32>, count: Option<i32>, minimized: Option<bool>, as_list: Option<bool>, unfold: Option<bool>, id: Option<&str>, r#type: Option<&str>, compress_ids: Option<bool>) -> Result<serde_json::Value, Error<DocumentPathGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/document/{path}", local_var_configuration.base_path, path=crate::apis::urlencode(path));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = graph_type {
        local_var_req_builder = local_var_req_builder.query(&[("graph_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = skip {
        local_var_req_builder = local_var_req_builder.query(&[("skip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = minimized {
        local_var_req_builder = local_var_req_builder.query(&[("minimized", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = as_list {
        local_var_req_builder = local_var_req_builder.query(&[("as_list", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unfold {
        local_var_req_builder = local_var_req_builder.query(&[("unfold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = compress_ids {
        local_var_req_builder = local_var_req_builder.query(&[("compress_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DocumentPathGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn document_path_post(configuration: &configuration::Configuration, path: &str, author: &str, message: &str, graph_type: Option<&str>, full_replace: Option<bool>, raw_json: Option<bool>) -> Result<serde_json::Value, Error<DocumentPathPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/document/{path}", local_var_configuration.base_path, path=crate::apis::urlencode(path));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("author", &author.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message", &message.to_string())]);
    if let Some(ref local_var_str) = graph_type {
        local_var_req_builder = local_var_req_builder.query(&[("graph_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = full_replace {
        local_var_req_builder = local_var_req_builder.query(&[("full_replace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = raw_json {
        local_var_req_builder = local_var_req_builder.query(&[("raw_json", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DocumentPathPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn document_path_put(configuration: &configuration::Configuration, path: &str, author: &str, message: &str, graph_type: Option<&str>, create: Option<bool>, raw_json: Option<bool>) -> Result<(), Error<DocumentPathPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/document/{path}", local_var_configuration.base_path, path=crate::apis::urlencode(path));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("author", &author.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message", &message.to_string())]);
    if let Some(ref local_var_str) = graph_type {
        local_var_req_builder = local_var_req_builder.query(&[("graph_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = create {
        local_var_req_builder = local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = raw_json {
        local_var_req_builder = local_var_req_builder.query(&[("raw_json", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DocumentPathPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

